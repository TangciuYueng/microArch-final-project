# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CICD with Maven

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run: 
        working-directory: ./heartWave
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        java-version: '21'
        distribution: 'adopt'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Make the script files executable
      run: chmod +x ./collect_jars.sh
    - name: Run the scripts
      run: |
        ./collect_jars.sh
        ls /home/runner/work/microArch-final-project/microArch-final-project/heartWave/jars
        pwd
      
    - name: Upload and deploy
      uses: cross-the-world/ssh-scp-ssh-pipelines@v1.1.4
      with:
        host: ${{ secrets.HOST }}
        port: ${{ secrets.PORT }}
        user: ${{ secrets.USERNAME }}
        pass: ${{ secrets.PASSWORD }}
        connect_timeout: 600 # optional, default is 30s
        scp: |
          /home/runner/work/microArch-final-project/microArch-final-project/heartWave/jars/* => ${{ secrets.DEST }}
        # last_ssh: |
        #   cd /www/wwwroot
        #   ps -ef | grep *.jar | grep -v grep | awk '{print $2}' | xargs kill -9 
        #   nohup java -jar *.jar --spring.profiles.active=prod > nohup.out &
        #   exit
          
